'use strict'
const path = require('path')
const arrayify = require('array-back')

/**
 * Typically used by cli app loading plugins.
 * 
 * Like node's `require` but with a few extra features:
 * - Seaches `node_modules` in the current working directory by default.
 * - You can specify your folders in which to search for modules
 * - You can specify a module prefix
 * @module load-module
 * @example
 * const loadModule = require('load-module')
 */
module.exports = loadModule

const attempted = []

/**
 * @alias module:load-module
 * @param {string} - module identifier
 * @param {object} [options]
 * @param {string} [options.modulePrefix] - If the input `moduleID` is `rewrite` and the `module-prefix` is `lws`, load-module will attempt to laod `lws-rewrite` then `rewrite`.
 * @param {string|string[]} [options.moduleDir] - An additional location to search for modules.
 */
function loadModule (modulePath, options) {
  options = Object.assign({ modulePrefix: '' }, options)
  options.moduleDir = arrayify(options.moduleDir)
  let result

  /* Specific module directories were supplied */
  if (options.moduleDir && options.moduleDir.length) {
    for (const dir of arrayify(options.moduleDir)) {
      try {
        result = loadModule(path.resolve(dir, modulePath), { modulePrefix: options.modulePrefix })
        break
      } catch (err) {
        attempted.push(err.attempted)
      }
    }
    if (!result) {
      return loadModule(modulePath, { modulePrefix: options.modulePrefix })
    }

  /* Search default module directories */
  } else {
    if (modulePath.startsWith('.')) modulePath = path.resolve(modulePath)
    const pathsToTry = [
      modulePath,
      path.resolve(process.cwd(), modulePath),
      path.resolve(process.cwd(), 'node_modules', modulePath)
    ]
    if (options.modulePrefix) {
      pathsToTry.push(options.modulePrefix + modulePath)
      pathsToTry.push(path.resolve(path.dirname(modulePath), options.modulePrefix + path.basename(modulePath)))
      pathsToTry.push(path.resolve(path.dirname(modulePath), 'node_modules', options.modulePrefix + path.basename(modulePath)))
    }
    for (const potentialPath of pathsToTry) {
      try {
        result = require(potentialPath)
        break
      } catch (err) {
        if (err.code !== 'MODULE_NOT_FOUND') throw err
      }
    }
    if (!result) {
      let msg = `Module not found: ${modulePath}. Module paths attempted: `
      msg += JSON.stringify(pathsToTry, null, '  ')
      const err = new Error(msg)
      err.attempted = pathsToTry
      err.code = 'MODULE_NOT_FOUND'
      throw err
    }
  }
  return result
}
